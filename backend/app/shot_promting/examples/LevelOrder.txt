USER: explain level-order traversal /
ASSISTANT:
Level-order traversal is a method of visiting all the nodes in a binary tree level by level from left to right. It uses a queue to keep track of nodes at each level.
``` python

from manim import *
import numpy as np

class LevelOrderTraversal(Scene):
    def construct(self):
        # Create title
        title = Text("Level Order Traversal", font_size=36, color=BLUE)
        title.to_edge(UP)
        self.add(title)
        
        # Split screen into two halves
        # Left half for tree visualization
        # Right half for queue and code
        
        # Tree data structure
        tree_data = {
            5: {"pos": np.array([-4, 1, 0]), "left": 12, "right": 13},
            12: {"pos": np.array([-5.5, 0, 0]), "left": 7, "right": None},
            13: {"pos": np.array([-2.5, 0, 0]), "left": 14, "right": 2},
            7: {"pos": np.array([-6, -1, 0]), "left": 17, "right": 23},
            14: {"pos": np.array([-3, -1, 0]), "left": 27, "right": 3},
            2: {"pos": np.array([-2, -1, 0]), "left": 8, "right": 11},
            17: {"pos": np.array([-6.5, -2, 0]), "left": None, "right": None},
            23: {"pos": np.array([-5.5, -2, 0]), "left": None, "right": None},
            27: {"pos": np.array([-3.5, -2, 0]), "left": None, "right": None},
            3: {"pos": np.array([-2.5, -2, 0]), "left": None, "right": None},
            8: {"pos": np.array([-2.2, -2, 0]), "left": None, "right": None},
            11: {"pos": np.array([-1.8, -2, 0]), "left": None, "right": None}
        }
        
        # Create tree nodes and edges
        nodes = {}
        edges = []
        
        for value, data in tree_data.items():
            # Create node
            node = Circle(radius=0.25, color=WHITE, fill_opacity=0.8)
            node.move_to(data["pos"])
            text = Text(str(value), font_size=20, color=BLACK)
            text.move_to(data["pos"])
            nodes[value] = {"circle": node, "text": text, "highlighted": False}
            
            # Create edges
            if data["left"]:
                left_pos = tree_data[data["left"]]["pos"]
                edge = Line(data["pos"], left_pos, color=WHITE)
                edges.append(edge)
            
            if data["right"]:
                right_pos = tree_data[data["right"]]["pos"]
                edge = Line(data["pos"], right_pos, color=WHITE)
                edges.append(edge)
        
        # Add tree to scene
        for edge in edges:
            self.add(edge)
        for value, node_data in nodes.items():
            self.add(node_data["circle"], node_data["text"])
        
        # Queue visualization on the right side
        queue_title = Text("Queue", font_size=24, color=YELLOW)
        queue_title.move_to(np.array([2, 2, 0]))
        self.add(queue_title)
        
        # Queue containers (empty initially)
        queue_boxes = []
        for i in range(7):
            box = Rectangle(width=0.6, height=0.4, color=WHITE)
            box.move_to(np.array([1 + i * 0.7, 1.5, 0]))
            queue_boxes.append(box)
            self.add(box)
        
        # Traversal order display
        traversal_title = Text("Traversal Order", font_size=20, color=GREEN)
        traversal_title.move_to(np.array([3, 0.5, 0]))
        self.add(traversal_title)
        
        traversal_text = Text("", font_size=18, color=WHITE)
        traversal_text.move_to(np.array([3, 0, 0]))
        self.add(traversal_text)
        
        # Algorithm steps display
        steps_title = Text("Algorithm Steps", font_size=20, color=ORANGE)
        steps_title.move_to(np.array([3, -1, 0]))
        self.add(steps_title)
        
        step_text = Text("", font_size=14, color=WHITE)
        step_text.move_to(np.array([3, -1.5, 0]))
        self.add(step_text)
        
        # Level order traversal algorithm
        queue = [5]  # Start with root
        traversal_order = []
        queue_display = []
        
        def highlight_node(value, color=GREEN):
            nodes[value]["circle"].set_fill(color, opacity=0.8)
            nodes[value]["highlighted"] = True
        
        def unhighlight_node(value):
            nodes[value]["circle"].set_fill(WHITE, opacity=0.8)
            nodes[value]["highlighted"] = False
        
        def update_queue_display():
            # Clear previous queue display
            for box in queue_boxes:
                for mob in box.submobjects:
                    if isinstance(mob, Text):
                        box.remove(mob)
            
            # Add current queue items
            for i, item in enumerate(queue_display[:7]):  # Show max 7 items
                text = Text(str(item), font_size=16, color=BLACK)
                text.move_to(queue_boxes[i].get_center())
                queue_boxes[i].add(text)
        
        def update_traversal_display():
            traversal_str = " â†’ ".join(map(str, traversal_order))
            new_text = Text(traversal_str, font_size=16, color=WHITE)
            new_text.move_to(np.array([3, 0, 0]))
            self.remove(traversal_text)
            self.add(new_text)
            return new_text
        
        def update_step_display(step_desc):
            new_text = Text(step_desc, font_size=12, color=WHITE)
            new_text.move_to(np.array([3, -1.5, 0]))
            self.remove(step_text)
            self.add(new_text)
            return new_text
        
        # Animation sequence
        self.wait(1)
        
        # Step 1: Add root to queue
        queue_display = [5]
        update_queue_display()
        step_text = update_step_display("Step 1: Add root(5) to queue")
        self.wait(2)
        
        step_counter = 2
        
        while queue:
            current = queue.pop(0)
            queue_display.pop(0)
            
            # Highlight current node
            highlight_node(current, YELLOW)
            
            # Add to traversal order
            traversal_order.append(current)
            traversal_text = update_traversal_display()
            
            # Update step description
            step_desc = f"Step {step_counter}: Process node {current}"
            step_text = update_step_display(step_desc)
            self.wait(1.5)
            
            # Add children to queue
            if tree_data[current]["left"]:
                left_child = tree_data[current]["left"]
                queue.append(left_child)
                queue_display.append(left_child)
            
            if tree_data[current]["right"]:
                right_child = tree_data[current]["right"]
                queue.append(right_child)
                queue_display.append(right_child)
            
            # Update queue display
            update_queue_display()
            
            # Change node color to processed (green)
            highlight_node(current, GREEN)
            
            if queue:
                children_added = []
                if tree_data[current]["left"]:
                    children_added.append(str(tree_data[current]["left"]))
                if tree_data[current]["right"]:
                    children_added.append(str(tree_data[current]["right"]))
                
                if children_added:
                    step_desc = f"Added children: {', '.join(children_added)}"
                    step_text = update_step_display(step_desc)
            else:
                step_text = update_step_display("Queue is empty - Traversal complete!")
            
            step_counter += 1
            self.wait(2)
        
        # Final display
        final_text = Text("Level Order Traversal Complete!", font_size=20, color=GREEN)
        final_text.move_to(np.array([3, -2.5, 0]))
        self.add(final_text)
        
        self.wait(3)

# To run this animation, save it as a .py file and run:
# manim -pql filename.py LevelOrderTraversal
```