USER: explain Pythagorean theorem /
ASSISTANT:
The Pythagorean Theorem states that in a right-angled triangle:
a² + b² = c²
``` python 


from manim import *
import numpy as np

class PythagoreanProof(Scene):
    def construct(self):
        # Set black background
        self.camera.background_color = BLACK
        
        # Split screen: 40% left for animation, 60% right for equations
        # (No visible boundaries - just invisible layout guides)
        
        # Title
        title = Text("Pythagorean Theorem Proof", font_size=36, color=WHITE)
        title.to_edge(UP, buff=0.3)
        self.play(Write(title))
        self.wait(1)
        
        # PART 1: ANIMATION SECTION (40% - LEFT SIDE)
        self.animate_triangle_construction()
        self.wait(1)
        
        # PART 2: EQUATION SECTION (60% - RIGHT SIDE)
        self.show_mathematical_proof()
        
        # Final theorem statement
        self.show_final_theorem()
        
        self.wait(3)
    
    def animate_triangle_construction(self):
        """Animate the construction of right triangle and squares"""
        
        # Create smaller right triangle with sides 3, 4, 5
        triangle_scale = 0.8  # Reduced from 1.2 to 0.8
        A = np.array([-1.2, -0.8, 0]) * triangle_scale
        B = np.array([1.2, -0.8, 0]) * triangle_scale
        C = np.array([-1.2, 1.6, 0]) * triangle_scale
        
        # Shift triangle further left to prevent overlap
        shift_vector = LEFT * 3.5  # Increased from 2 to 3.5
        A += shift_vector
        B += shift_vector
        C += shift_vector
        
        # Create triangle
        triangle = Polygon(A, B, C, color=WHITE, fill_opacity=0.2, fill_color=BLUE)
        
        # Animate triangle creation
        self.play(Create(triangle), run_time=2)
        
        # Add side labels
        side_a = Line(B, C, color=RED, stroke_width=4)
        side_b = Line(A, C, color=GREEN, stroke_width=4)
        side_c = Line(A, B, color=BLUE, stroke_width=4)
        
        label_a = MathTex("a", color=RED, font_size=20).next_to(side_a, RIGHT, buff=0.1)
        label_b = MathTex("b", color=GREEN, font_size=20).next_to(side_b, LEFT, buff=0.1)
        label_c = MathTex("c", color=BLUE, font_size=20).next_to(side_c, DOWN, buff=0.1)
        
        self.play(
            Create(side_a), Create(side_b), Create(side_c),
            Write(label_a), Write(label_b), Write(label_c),
            run_time=2
        )
        
        # Add right angle indicator (smaller)
        right_angle = RightAngle(Line(A, C), Line(A, B), length=0.2, color=YELLOW)  # Reduced from 0.3 to 0.2
        self.play(Create(right_angle))
        
        self.wait(1)
        
        # Create squares on each side
        self.animate_squares_construction(A, B, C, side_a, side_b, side_c)
    
    def animate_squares_construction(self, A, B, C, side_a, side_b, side_c):
        """Animate the construction of squares on each side"""
        
        # Calculate square positions and create squares
        # Square on side c (hypotenuse)
        c_vec = B - A
        c_perp = np.array([-c_vec[1], c_vec[0], 0])
        c_perp = c_perp / np.linalg.norm(c_perp) * np.linalg.norm(c_vec)
        
        square_c_points = [A, B, B + c_perp, A + c_perp]
        square_c = Polygon(*square_c_points, color=BLUE, fill_opacity=0.3, stroke_width=2)
        
        # Square on side a
        a_vec = C - B
        a_perp = np.array([a_vec[1], -a_vec[0], 0])
        a_perp = a_perp / np.linalg.norm(a_perp) * np.linalg.norm(a_vec)
        
        square_a_points = [B, C, C + a_perp, B + a_perp]
        square_a = Polygon(*square_a_points, color=RED, fill_opacity=0.3, stroke_width=2)
        
        # Square on side b
        b_vec = C - A
        b_perp = np.array([-b_vec[1], b_vec[0], 0])
        b_perp = b_perp / np.linalg.norm(b_perp) * np.linalg.norm(b_vec)
        
        square_b_points = [A, C, C + b_perp, A + b_perp]
        square_b = Polygon(*square_b_points, color=GREEN, fill_opacity=0.3, stroke_width=2)
        
        # Animate square construction with smooth transitions
        self.play(
            Transform(side_c.copy(), square_c),
            run_time=1.5
        )
        self.add(square_c)
        
        self.play(
            Transform(side_a.copy(), square_a),
            run_time=1.5
        )
        self.add(square_a)
        
        self.play(
            Transform(side_b.copy(), square_b),
            run_time=1.5
        )
        self.add(square_b)
        
        # Add area labels to squares (smaller font)
        area_c = MathTex("c^2", color=BLUE, font_size=16).move_to(square_c.get_center())
        area_a = MathTex("a^2", color=RED, font_size=16).move_to(square_a.get_center())
        area_b = MathTex("b^2", color=GREEN, font_size=16).move_to(square_b.get_center())
        
        self.play(
            Write(area_c), Write(area_a), Write(area_b),
            run_time=1.5
        )
        
        # Highlight the relationship
        self.play(
            Indicate(square_a, color=RED, scale_factor=1.1),
            Indicate(square_b, color=GREEN, scale_factor=1.1),
            run_time=1
        )
        self.play(
            Indicate(square_c, color=BLUE, scale_factor=1.1),
            run_time=1
        )
    
    def show_mathematical_proof(self):
        """Show the mathematical proof on the right side"""
        
        # Create equation area title (moved further right)
        eq_title = Text("Mathematical Proof", font_size=24, color=YELLOW)
        eq_title.move_to(RIGHT * 4 + UP * 2.5)
        self.play(Write(eq_title))
        
        # Step 1: State the theorem
        step1 = MathTex(
            r"\text{For a right triangle with legs } a, b",
            r"\text{ and hypotenuse } c:",
            font_size=24,
            color=WHITE
        ).arrange(DOWN, buff=0.2)
        step1.move_to(RIGHT * 4 + UP * 1.7)
        
        self.play(Write(step1), run_time=2)
        self.wait(1)
        
        # Step 2: Area relationship
        step2_title = Text("Area Relationship:", font_size=24, color=ORANGE)
        step2_title.move_to(RIGHT * 4 + UP * 0.7)
        
        step2_eq = MathTex(
            r"a^2 + b^2 = c^2",
            font_size=36,
            color=WHITE
        ).move_to(RIGHT * 4 + UP * 0.1)
        
        self.play(Write(step2_title))
        self.play(Write(step2_eq), run_time=2)
        self.wait(1)
        
        # Step 3: Numerical example
       
        
        example_calc = VGroup(
            MathTex(r"3^2 + 4^2 = 9 + 16 = 25", font_size=24, color=WHITE),
            MathTex(r"5^2 = 25", font_size=24, color=WHITE),
            MathTex(r"\therefore 3^2 + 4^2 = 5^2 \,\checkmark", font_size=24, color=GREEN)
        ).arrange(DOWN, buff=0.2)
        example_calc.move_to(RIGHT * 4 + DOWN * 1.2)
        
        
        
        for calc in example_calc:
            self.play(Write(calc), run_time=1)
            self.wait(0.5)
    
    def show_final_theorem(self):
        """Show the final theorem statement"""
        
        # Create a highlighted box for the final theorem
        theorem_box = Rectangle(
            width=12, height=1.5,
            color=GOLD, stroke_width=3,
            fill_opacity=0.1, fill_color=GOLD
        ).move_to(DOWN * 3.5)
        
        final_theorem = MathTex(
            r"\boxed{a^2 + b^2 = c^2}",
            r"\quad \text{(Pythagorean Theorem)}",
            font_size=32,
            color=GOLD
        ).arrange(RIGHT, buff=0.5)
        final_theorem.move_to(theorem_box.get_center())
        
        # Animate the final reveal
        self.play(Create(theorem_box), run_time=1)
        self.play(Write(final_theorem), run_time=2)
        
        # Final emphasis
        self.play(
            theorem_box.animate.set_color(YELLOW),
            final_theorem.animate.set_color(YELLOW),
            run_time=1
        )
        
        # Celebration effect
        confetti = VGroup(*[
            Dot(radius=0.05, color=random_color()).move_to(
                np.random.uniform(-6, 6) * RIGHT + 
                np.random.uniform(-3, 3) * UP
            ) for _ in range(20)
        ])
        
        self.play(
            *[FadeIn(dot, scale=0.5) for dot in confetti],
            run_time=1
        )
        self.play(
            *[FadeOut(dot) for dot in confetti],
            run_time=1
        )

def random_color():
    """Generate a random bright color"""
    colors = [RED, BLUE, GREEN, YELLOW, PURPLE, ORANGE, PINK, TEAL]
    return np.random.choice(colors)

# To render this animation, save as pythagorean_proof.py and run:
# manim pythagorean_proof.py PythagoreanProof -pql
