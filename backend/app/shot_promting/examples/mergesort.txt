
USER: explain merge sort /
ASSISTANT:
merge sort is a way to sort the array using divide and rule

``` python


from manim import *

class MergeSortVisualization(Scene):
    def construct(self):
        # Title
        title = Text("Merge Sort Example", font_size=36, color=BLUE)
        title.to_edge(UP, buff=0.3)
        self.play(Write(title))
        self.wait(1)
        
        # Initial array
        initial_array = [38, 27, 43, 10]
        self.animate_merge_sort(initial_array, title)
        
        # Final message
        final_text = Text("Array is now sorted!", font_size=24, color=GREEN)
        final_text.to_edge(DOWN, buff=0.5)
        self.play(Write(final_text))
        self.wait(2)

    def create_array_visual(self, arr, position=ORIGIN, color=WHITE, scale=1):
        """Create visual representation of an array"""
        boxes = []
        numbers = []
        
        box_width = 1.2 * scale  # Increased width to prevent overlap
        box_height = 0.8 * scale  # Increased height
        
        # Center the array around the given position
        total_width = len(arr) * box_width
        start_x = position[0] - total_width / 2 + box_width / 2
        
        for i, num in enumerate(arr):
            # Create box
            box = Rectangle(width=box_width, height=box_height, color=color, stroke_width=2)
            box.move_to([start_x + i * box_width, position[1], 0])
            
            # Create number with smaller font to fit inside box
            number = Text(str(num), font_size=int(24 * scale), color=color)
            number.move_to(box.get_center())
            
            boxes.append(box)
            numbers.append(number)
        
        return VGroup(*boxes), VGroup(*numbers)

    def animate_merge_sort(self, arr, title):
        """Main merge sort animation with proper positioning"""
        
        # Step 1: Show initial array
        step1_text = Text("Step 1: Split array into two halves", 
                         font_size=20, color=YELLOW)
        step1_text.next_to(title, DOWN, buff=0.3)
        self.play(Write(step1_text))
        
        # Initial array at top level - moved down
        initial_pos = [0, 1.5, 0]  # Moved down from 2.5
        initial_boxes, initial_numbers = self.create_array_visual(arr, initial_pos)
        initial_group = VGroup(initial_boxes, initial_numbers)
        self.play(Create(initial_group))
        self.wait(1)
        
        # Show partition indicator - moved down
        partition_text = Text("Partition", font_size=14, color=RED)
        partition_text.move_to([0, 1.8, 0])  # Moved down from 2.8
        partition_line = Line([0, 1.2, 0], [0, 0.8, 0], color=RED, stroke_width=3)  # Moved down
        
        self.play(Write(partition_text), Create(partition_line))
        self.wait(1)
        
        # Create two halves with more spacing - moved down
        left_half = arr[:2]  # [38, 27]
        right_half = arr[2:]  # [43, 10]
        
        left_pos = [-2, 0.5, 0]  # Moved down from 1.5
        right_pos = [2, 0.5, 0]  # Moved down from 1.5
        
        left_boxes, left_numbers = self.create_array_visual(left_half, left_pos, BLUE)
        right_boxes, right_numbers = self.create_array_visual(right_half, right_pos, BLUE)
        
        left_group = VGroup(left_boxes, left_numbers)
        right_group = VGroup(right_boxes, right_numbers)
        
        # Animate the split
        self.play(
            Create(left_group),
            Create(right_group),
            FadeOut(partition_line),
            FadeOut(partition_text)
        )
        self.wait(1)
        
        # Step 2: Split subarrays into individual elements
        self.play(Transform(step1_text, Text("Step 2: Split subarrays into individual elements", 
                                           font_size=20, color=YELLOW).next_to(title, DOWN, buff=0.3)))
        
        # Create individual elements positioned with proper spacing - moved down
        elem_positions = [[-3, -0.8, 0], [-1, -0.8, 0], [1, -0.8, 0], [3, -0.8, 0]]  # Moved down from 0.2
        individual_groups = []
        
        for i, (pos, val) in enumerate(zip(elem_positions, arr)):
            boxes, numbers = self.create_array_visual([val], pos, ORANGE, 0.9)  # Slightly larger scale
            group = VGroup(boxes, numbers)
            individual_groups.append(group)
        
        self.play(*[Create(group) for group in individual_groups])
        self.wait(2)
        
        # Step 3: Merge individual elements into sorted pairs
        self.play(Transform(step1_text, Text("Step 3: Merge pairs into sorted subarrays", 
                                           font_size=20, color=YELLOW).next_to(title, DOWN, buff=0.3)))
        
        # Show merge arrows for pairs with proper positioning - moved down
        merge_text1 = Text("Merge", font_size=14, color=GREEN)
        merge_text1.move_to([-2, -1.3, 0])  # Moved down from -0.3
        merge_text2 = Text("Merge", font_size=14, color=GREEN)
        merge_text2.move_to([2, -1.3, 0])  # Moved down from -0.3
        
        self.play(Write(merge_text1), Write(merge_text2))
        self.wait(1)
        
        # Create sorted pairs with proper spacing - moved down
        sorted_left = [27, 38]  # Sorted version of [38, 27]
        sorted_right = [10, 43]  # Sorted version of [43, 10]
        
        sorted_left_pos = [-2, -2, 0]  # Moved down from -1
        sorted_right_pos = [2, -2, 0]  # Moved down from -1
        
        sorted_left_boxes, sorted_left_numbers = self.create_array_visual(
            sorted_left, sorted_left_pos, GREEN
        )
        sorted_right_boxes, sorted_right_numbers = self.create_array_visual(
            sorted_right, sorted_right_pos, GREEN
        )
        
        sorted_left_group = VGroup(sorted_left_boxes, sorted_left_numbers)
        sorted_right_group = VGroup(sorted_right_boxes, sorted_right_numbers)
        
        self.play(
            Create(sorted_left_group),
            Create(sorted_right_group)
        )
        self.wait(2)
        
        # Step 4: Final merge
        self.play(
            Transform(step1_text, Text("Step 4: Merge sorted subarrays into final array", 
                                     font_size=20, color=YELLOW).next_to(title, DOWN, buff=0.3)),
            FadeOut(merge_text1),
            FadeOut(merge_text2)
        )
        
        # Final merge indicator - moved down
        final_merge_text = Text("Final Merge", font_size=14, color=GREEN)
        final_merge_text.move_to([0, -2.8, 0])  # Moved down from -1.8
        self.play(Write(final_merge_text))
        self.wait(1)
        
        # Create final sorted array with proper spacing - moved down
        final_sorted = [10, 27, 38, 43]
        final_pos = [0, -3.5, 0]  # Moved down from -2.8
        
        final_boxes, final_numbers = self.create_array_visual(
            final_sorted, final_pos, GREEN, 1.2
        )
        final_group = VGroup(final_boxes, final_numbers)
        
        self.play(Create(final_group))
        self.wait(1)
        
        # Clean up intermediate elements, keep only initial and final arrays
        self.play(
            FadeOut(initial_group),
            FadeOut(left_group),
            FadeOut(right_group),
            *[FadeOut(group) for group in individual_groups],
            FadeOut(sorted_left_group),
            FadeOut(sorted_right_group),
            FadeOut(final_merge_text),
            FadeOut(step1_text)
        )
        
        # Show comparison: unsorted vs sorted
        comparison_text = Text("Before vs After", font_size=20, color=WHITE)
        comparison_text.move_to([0, 1, 0])
        
        # Recreate initial array for comparison
        before_text = Text("Before:", font_size=16, color=WHITE)
        before_text.move_to([-2, 0, 0])
        before_boxes, before_numbers = self.create_array_visual(arr, [-0.5, 0, 0], WHITE, 0.8)
        before_group = VGroup(before_boxes, before_numbers)
        
        after_text = Text("After:", font_size=16, color=WHITE)
        after_text.move_to([-2, -1, 0])
        
        self.play(
            Write(comparison_text),
            Write(before_text),
            Create(before_group),
            Write(after_text),
            final_group.animate.move_to([-0.5, -1, 0]).scale(0.67)
        )
        
        self.wait(3)


```